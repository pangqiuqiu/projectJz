{"remainingRequest":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\thread-loader\\dist\\cjs.js!D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\babel-loader\\lib\\index.js!D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\myCompany\\zhongdianqiche\\manage\\src\\views\\information\\Newly.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\myCompany\\zhongdianqiche\\manage\\src\\views\\information\\Newly.vue","mtime":1595601934604},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}