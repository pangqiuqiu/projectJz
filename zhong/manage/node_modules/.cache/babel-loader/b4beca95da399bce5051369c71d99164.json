{"remainingRequest":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\thread-loader\\dist\\cjs.js!D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\babel-loader\\lib\\index.js!D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\myCompany\\zhongdianqiche\\manage\\src\\views\\distributor\\Message.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\myCompany\\zhongdianqiche\\manage\\src\\views\\distributor\\Message.vue","mtime":1607308756878},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\manage\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5jb3B5LXdpdGhpbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmV2ZXJ5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsbCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbHRlciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJldmVyc2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb3J0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc3ViYXJyYXkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1sb2NhbGUtc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiRDpcXG15Q29tcGFueVxcemhvbmdkaWFucWljaGVcXG1hbmFnZVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IHBpY2tlck9wdGlvbnMsIGRhdGVDb252ZXJzaW9uIH0gZnJvbSAnLi4vLi4vYXNzZXRzL2pzL3RpbWVyLmpzJzsKaW1wb3J0IFhMU1ggZnJvbSAneGxzeCc7CmltcG9ydCBKc29uRXhjZWwgZnJvbSAndnVlLWpzb24tZXhjZWwnOwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgZG93bmxvYWRFeGNlbDogSnNvbkV4Y2VsCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgLy8g5b2T5YmN5Lq6562J57qnCiAgICAgIGxldmVsOiAwLAogICAgICAvLyDmkJzntKLmnaHku7YKICAgICAgZm9ybUlubGluZTogewogICAgICAgIHR5cGU6ICcnLAogICAgICAgIG9yaWdpbjogJycsCiAgICAgICAgaXM6ICcnLAogICAgICAgIHhzRGF0ZVM6ICcnLAogICAgICAgIHhzRGF0ZUU6ICcnLAogICAgICAgIHBhZ2VObzogMSwKICAgICAgICBwYWdlU2l6ZTogMjAKICAgICAgfSwKICAgICAgLy8g5pe26Ze05b+r5o236ZSuCiAgICAgIHBpY2tlck9wdGlvbnM6IHBpY2tlck9wdGlvbnMsCiAgICAgIHRpbWU6IFtdLAogICAgICAvLyDmgLvmlbAKICAgICAgdG90YWw6IDAsCiAgICAgIC8vIOihqOagvAogICAgICB0YWJsZURhdGE6IFtdLAogICAgICAvLyDnu4/plIDllYbplIDllK7pob7pl67mlbDnu4QKICAgICAgZnBVc2VyTGlzdDogW10sCiAgICAgIC8vIOmUgOWUrumhvumXriDlr7nor53moYYKICAgICAgZGlhbG9nRm9ybVZpc2libGU6IGZhbHNlLAogICAgICBmb3JtOiB7CiAgICAgICAgdXNlcklkOiAnJywKICAgICAgICAvLyDplIDllK7pob7pl64KICAgICAgICBjbHVlSWQ6ICcnCiAgICAgIH0sCiAgICAgIGZvcm1MYWJlbFdpZHRoOiAnMTIwcHgnLAogICAgICAvLyDliIbphY3nur/ntKIg5a+56K+d5qGGCiAgICAgIGRpYWxvZ0Zvcm1DbHVlOiBmYWxzZSwKICAgICAgZm9ybUNsdWU6IHsKICAgICAgICBhcnk6IFtdLAogICAgICAgIGNsdWVJZDogJycKICAgICAgfSwKICAgICAgYWNjb3JkYW5jZUFyeTogW10sCiAgICAgIC8vIOespuWQiOadoeS7tueahOe7j+mUgOWVhuaVsOe7hAogICAgICAvLyDlr7zlh7rmlbDmja4KICAgICAganNvbl9maWVsZHM6IHsKICAgICAgICAn5oql5ZCN5Z+O5biCJzogJ3NwQ2l0eScsCiAgICAgICAgJ+aEj+WQkeWTgeeJjCc6ICdicmFuZCcsCiAgICAgICAgJ+aEj+WQkei9puWeiyc6ICdzZXJpZXMnLAogICAgICAgICflrqLmiLflp5PlkI0nOiAnbmFtZScsCiAgICAgICAgJ+WuouaIt+eUteivnSc6ICdwaG9uZScsCiAgICAgICAgJ+aKpeWQjeaXtumXtCc6ICd4c0RhdGUnCiAgICAgIH0KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyDojrflj5bnlKjmiLfnlZnoqIDliJfooagKICAgIGdldE1zZWVhZ2U6IGZ1bmN0aW9uIGdldE1zZWVhZ2UoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX3JlZiwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLnRpbWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMyLnRpbWUgPSBbXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfdGhpczIuZm9ybUlubGluZS54c0RhdGVTID0gZGF0ZUNvbnZlcnNpb24oX3RoaXMyLnRpbWVbMF0pOwogICAgICAgICAgICAgICAgX3RoaXMyLmZvcm1JbmxpbmUueHNEYXRlRSA9IGRhdGVDb252ZXJzaW9uKF90aGlzMi50aW1lWzFdKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi4kaHR0cC5wb3N0KCcvZGVhbGVyL3Nob3dUYWInLCBfdGhpczIuZm9ybUlubGluZSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9yZWYgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3JlZi5kYXRhOwogICAgICAgICAgICAgICAgX3RoaXMyLnRhYmxlRGF0YSA9IHJlcy5sOwogICAgICAgICAgICAgICAgX3RoaXMyLnRvdGFsID0gcmVzLm51bTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOiOt+WPluW9k+WJjeeZu+mZhuS6uueahOetiee6pwogICAgZ2V0TGV2ZWw6IGZ1bmN0aW9uIGdldExldmVsKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBfcmVmMiwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy4kaHR0cC5wb3N0KCcvdXNlci9sZXZlbCcpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfcmVmMiA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3JlZjIuZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzMy5sZXZlbCA9IHJlczsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5p+l6K+iCiAgICBzdWJtaXQ6IGZ1bmN0aW9uIHN1Ym1pdCgpIHsKICAgICAgdGhpcy5mb3JtSW5saW5lLnBhZ2VObyA9IDE7CiAgICAgIHRoaXMuZ2V0TXNlZWFnZSgpOwogICAgfSwKICAgIC8vIOWIh+aNoumhteaVsAogICAgY2hhbmdlUGFnZTogZnVuY3Rpb24gY2hhbmdlUGFnZShpbmRleCkgewogICAgICB0aGlzLmZvcm1JbmxpbmUucGFnZU5vID0gaW5kZXg7CiAgICAgIHRoaXMuZ2V0TXNlZWFnZSgpOwogICAgfSwKICAgIC8vIOWIhumFjemUgOWUrumhvumXrgogICAgZGlzdHJpYnV0aW9uOiBmdW5jdGlvbiBkaXN0cmlidXRpb24ocm93KSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIF9yZWYzLCByZXM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LiRodHRwLnBvc3QoJy9kZWFsZXIveHNndycpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfcmVmMyA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3JlZjMuZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzNC5mcFVzZXJMaXN0ID0gcmVzOwogICAgICAgICAgICAgICAgX3RoaXM0LmRpYWxvZ0Zvcm1WaXNpYmxlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF90aGlzNC5mb3JtLnVzZXJJZCA9IHJvdy5mcFVzZXI7IC8vIOi1i+WAvOmUgOWUrumhvumXrgoKICAgICAgICAgICAgICAgIF90aGlzNC5mb3JtLmNsdWVJZCA9IHJvdy5pZDsgLy8g57q/57SiSUQKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g56Gu6K6k5o+Q5LqkCiAgICBkaWFsb2c6IGZ1bmN0aW9uIGRpYWxvZygpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICB2YXIgcmVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM1LiRodHRwLnBvc3QoJy9kZWFsZXIvZnAnLCBfdGhpczUuZm9ybSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0NC5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKHJlcy5kYXRhICE9PSB0cnVlIHx8IHJlcy5zdGF0dXMgIT09IDIwMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgX3RoaXM1LiRtZXNzYWdlLmVycm9yKCfliIbphY3lpLHotKUnKSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF90aGlzNS4kbWVzc2FnZS5zdWNjZXNzKCfmk43kvZzmiJDlip8nKTsKCiAgICAgICAgICAgICAgICBfdGhpczUuZGlhbG9nRm9ybVZpc2libGUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIF90aGlzNS5mb3JtLnVzZXJJZCA9ICcnOwogICAgICAgICAgICAgICAgX3RoaXM1LmZvcm0uY2x1ZUlkID0gJyc7CgogICAgICAgICAgICAgICAgX3RoaXM1LmdldE1zZWVhZ2UoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOaAu+ermeWIhumFjee6v+e0ogogICAgYXJyYW5nZTogZnVuY3Rpb24gYXJyYW5nZShyb3cpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgX3JlZjQsIHJlczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF90aGlzNi5mb3JtQ2x1ZS5jbHVlSWQgPSByb3cuaWQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM2LiRodHRwLnBvc3QoJy9kZWFsZXIvZnBETGlzdCcsIHsKICAgICAgICAgICAgICAgICAgY2l0eTogcm93LnNwQ2l0eSwKICAgICAgICAgICAgICAgICAgc2VyaWVzOiByb3cuc2VyaWVzCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgX3JlZjQgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgICAgIHJlcyA9IF9yZWY0LmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczYuYWNjb3JkYW5jZUFyeSA9IHJlczsKICAgICAgICAgICAgICAgIF90aGlzNi5kaWFsb2dGb3JtQ2x1ZSA9IHRydWU7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOmAieaLqee7j+mUgOWVhgogICAgY2hhbmdlOiBmdW5jdGlvbiBjaGFuZ2UoaXRlbSkgewogICAgICAvLyDliKDpmaTpgInkuK3nu4/plIDllYYKICAgICAgaWYgKGl0ZW0uaXMgPT09IGZhbHNlKSB7CiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5mb3JtQ2x1ZS5hcnkuaW5kZXhPZihpdGVtLmlkKTsKICAgICAgICB0aGlzLmZvcm1DbHVlLmFyeS5zcGxpY2UoaW5kZXgsIDEpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZm9ybUNsdWUuYXJ5LnB1c2goaXRlbS5pZCk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDnoa7orqTmj5DkuqQKICAgIGRpYWxvZ0NsdWU6IGZ1bmN0aW9uIGRpYWxvZ0NsdWUoKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgdmFyIHJlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNy4kaHR0cC5wb3N0KCcvZGVhbGVyL2ZwRCcsIF90aGlzNy5mb3JtQ2x1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Ni5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKHJlcy5kYXRhICE9PSB0cnVlIHx8IHJlcy5zdGF0dXMgIT09IDIwMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgX3RoaXM3LiRtZXNzYWdlLmVycm9yKCfmk43kvZzlpLHotKUnKSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF90aGlzNy4kbWVzc2FnZS5zdWNjZXNzKCfmk43kvZzmiJDlip8nKTsKCiAgICAgICAgICAgICAgICBfdGhpczcuZm9ybUNsdWUuYXJ5ID0gW107CiAgICAgICAgICAgICAgICBfdGhpczcuZm9ybUNsdWUuY2x1ZUlkID0gJyc7CiAgICAgICAgICAgICAgICBfdGhpczcuZGlhbG9nRm9ybUNsdWUgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICBfdGhpczcuZ2V0TXNlZWFnZSgpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5LiK5Lyg5paH5Lu25pe25aSE55CG5pa55rOVCiAgICBoYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShmaWxlLCBmaWxlTGlzdCkgewogICAgICB0aGlzLmZpbGVUZW1wID0gZmlsZS5yYXc7CgogICAgICBpZiAodGhpcy5maWxlVGVtcCkgewogICAgICAgIGlmICh0aGlzLmZpbGVUZW1wLnR5cGUgPT09ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCcgfHwgdGhpcy5maWxlVGVtcC50eXBlID09ICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnKSB7CiAgICAgICAgICB0aGlzLmltcG9ydGZ4eCh0aGlzLmZpbGVUZW1wKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICAgIG1lc3NhZ2U6ICfpmYTku7bmoLzlvI/plJnor6/vvIzor7fliKDpmaTlkI7ph43mlrDkuIrkvKDvvIEnCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHRoaXMuJHJlZnMudXBsb2FkLmNsZWFyRmlsZXMoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICAgIG1lc3NhZ2U6ICfor7fkuIrkvKDpmYTku7bvvIEnCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBpbXBvcnRmeHg6IGZ1bmN0aW9uIGltcG9ydGZ4eChvYmopIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBpbnB1dERPTSA9IHRoaXMuJHJlZnMuaW5wdXRlcjsgLy8g6YCa6L+HRE9N5Y+W5paH5Lu25pWw5o2uCgogICAgICB0aGlzLmZpbGUgPSBldmVudC5jdXJyZW50VGFyZ2V0LmZpbGVzWzBdOwogICAgICB2YXIgckFCUyA9IGZhbHNlOyAvLyDmmK/lkKblsIbmlofku7bor7vlj5bkuLrkuozov5vliLblrZfnrKbkuLIKCiAgICAgIHZhciBmID0gdGhpcy5maWxlOwogICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsgLy8gaWYgKCFGaWxlUmVhZGVyLnByb3RvdHlwZS5yZWFkQXNCaW5hcnlTdHJpbmcpIHsKCiAgICAgIEZpbGVSZWFkZXIucHJvdG90eXBlLnJlYWRBc0JpbmFyeVN0cmluZyA9IGZ1bmN0aW9uIChmKSB7CiAgICAgICAgdmFyIGJpbmFyeSA9ICcnOwogICAgICAgIHZhciByQUJTID0gZmFsc2U7IC8vIOaYr+WQpuWwhuaWh+S7tuivu+WPluS4uuS6jOi/m+WItuWtl+espuS4sgoKICAgICAgICB2YXIgcHQgPSB0aGlzOwogICAgICAgIHZhciB3YjsgLy8g6K+75Y+W5a6M5oiQ55qE5pWw5o2uCgogICAgICAgIHZhciBvdXRkYXRhOwogICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwoKICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KHJlYWRlci5yZXN1bHQpOwogICAgICAgICAgdmFyIGxlbmd0aCA9IGJ5dGVzLmJ5dGVMZW5ndGg7CgogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSk7CiAgICAgICAgICB9IC8v5q2k5aSE5byV5YWl77yM55So5LqO6Kej5p6QZXhjZWwKCgogICAgICAgICAgdmFyIFhMU1ggPSByZXF1aXJlKCd4bHN4Jyk7CgogICAgICAgICAgaWYgKHJBQlMpIHsKICAgICAgICAgICAgd2IgPSBYTFNYLnJlYWQoYnRvYShmaXhkYXRhKGJpbmFyeSkpLCB7CiAgICAgICAgICAgICAgLy/miYvliqjovazljJYKICAgICAgICAgICAgICB0eXBlOiAnYmFzZTY0JwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdiID0gWExTWC5yZWFkKGJpbmFyeSwgewogICAgICAgICAgICAgIHR5cGU6ICdiaW5hcnknCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIG91dGRhdGEgPSBYTFNYLnV0aWxzLnNoZWV0X3RvX2pzb24od2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbMF1dKTsgLy8gb3V0ZGF0YeWwseaYr+ivu+WPlueahOaVsOaNru+8iOS4jeWMheWQq+agh+mimOihjOWNs+ihqOWktO+8jOihqOWktOS8muS9nOS4uuWvueixoeeahOS4i+agh++8iQogICAgICAgICAgLy8g5q2k5aSE5Y+v5a+55pWw5o2u6L+b6KGM5aSE55CGCgogICAgICAgICAgdmFyIGFyciA9IFtdOwogICAgICAgICAgb3V0ZGF0YS5tYXAoZnVuY3Rpb24gKHYpIHsKICAgICAgICAgICAgdmFyIG9iaiA9IHt9OwogICAgICAgICAgICBvYmouc3BDaXR5ID0gdlsn5oql5ZCN5Z+O5biCJ10gKyAn5biCJzsKICAgICAgICAgICAgb2JqLmJyYW5kID0gdlsn5oSP5ZCR5ZOB54mMJ107CiAgICAgICAgICAgIG9iai5zZXJpZXMgPSB2WyfmhI/lkJHovablnosnXTsKICAgICAgICAgICAgb2JqLm5hbWUgPSB2WyflrqLmiLflp5PlkI0nXTsKICAgICAgICAgICAgb2JqLnBob25lID0gdlsn5a6i5oi355S16K+dJ107CiAgICAgICAgICAgIG9iai54c0RhdGUgPSB2WyfmiqXlkI3ml7bpl7QnXTsKICAgICAgICAgICAgYXJyLnB1c2gob2JqKTsKICAgICAgICAgIH0pOwogICAgICAgICAgX3RoaXMuZGEgPSBhcnI7CiAgICAgICAgICBfdGhpcy5kYWxlbiA9IGFyci5sZW5ndGg7CgogICAgICAgICAgX3RoaXMuJGh0dHAucG9zdCgnL2RlYWxlci9pblhqJywgewogICAgICAgICAgICBhcnI6IGFycgogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgIGlmIChyZXMuZGF0YSkgcmV0dXJuIF90aGlzLiRtZXNzYWdlLnN1Y2Nlc3MoJ+S4iuS8oOaIkOWKnycpOwogICAgICAgICAgICByZXR1cm4gX3RoaXMuJG1lc3NhZ2UuZXJyb3IoJ+S4iuS8oOWksei0pScpOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGYpOwogICAgICB9OwoKICAgICAgaWYgKHJBQlMpIHsKICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhmKTsKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIC8vIOiOt+WPlueUqOaIt+eVmeiogOWIl+ihqAogICAgdGhpcy5nZXRNc2VlYWdlKCk7IC8vIOetiee6pwoKICAgIHRoaXMuZ2V0TGV2ZWwoKTsKICB9Cn07"},null]}