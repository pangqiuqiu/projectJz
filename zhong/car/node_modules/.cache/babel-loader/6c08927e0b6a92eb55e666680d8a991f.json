{"remainingRequest":"H:\\jz\\w\\zhong\\car\\node_modules\\thread-loader\\dist\\cjs.js!H:\\jz\\w\\zhong\\car\\node_modules\\babel-loader\\lib\\index.js!H:\\jz\\w\\zhong\\car\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!H:\\jz\\w\\zhong\\car\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!H:\\jz\\w\\zhong\\car\\src\\views\\specialSale\\SaleDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"H:\\jz\\w\\zhong\\car\\src\\views\\specialSale\\SaleDetails.vue","mtime":1598254638772},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkg6L2p6L3cvemhvbmcvY2FyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IEhlYWRlciBmcm9tICcuLi8uLi9jb21wb25lbnRzL0hlYWRlci52dWUnOwppbXBvcnQgQk1hcCBmcm9tICdCTWFwJzsKaW1wb3J0IHZ1ZVNlYW1sZXNzU2Nyb2xsIGZyb20gJ3Z1ZS1zZWFtbGVzcy1zY3JvbGwnOwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgSGVhZGVyOiBIZWFkZXIsCiAgICB2dWVTZWFtbGVzc1Njcm9sbDogdnVlU2VhbWxlc3NTY3JvbGwKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICAvLyDpqozor4HmiYvmnLrlj7fmraPliJkKICAgIHZhciBtb2JpbGUgPSAvXlsxXShbMy05XSlbMC05XXs5fSQvOwoKICAgIHZhciBpc01vYmlsZSA9IGZ1bmN0aW9uIGlzTW9iaWxlKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaykgewogICAgICBpZiAoIW1vYmlsZS50ZXN0KHZhbHVlKSkgewogICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ+ivt+i+k+WFpeato+ehrueahOaJi+acuuWPtycpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYWxsYmFjaygpOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgIC8vIOWumuS9jQogICAgICBzcGVjaWFMYWN0aW9uOiAnJywKICAgICAgbW9udGhEYXRlOiAnJywKICAgICAgZGF5RGF0ZTogJycsCiAgICAgIHdlZWtEYXRlOiAnJywKICAgICAgLy8g5pCc57Si5qGGCiAgICAgIHNlYXJjaDogJycsCiAgICAgIC8vIOi9puWei+mAieaLqQogICAgICByYWRpbzogJycsCiAgICAgIHN3aXBlclJhZGlvOiBbXSwKICAgICAgY3VycmVudEluZGV4OiAwLAogICAgICAvLyDmsb3ovabkv6Hmga8KICAgICAgYnJhbmQ6ICcnLAogICAgICBhdXRvbW9iaWxlSW5mb3JtYXRpb246IHt9LAogICAgICB3aGVyZTogJ+ato+inhOe7j+mUgOWVhicsCiAgICAgIHByaWNlOiAn5YWN6LS56K+i5Lu3JywKICAgICAgLy8g5ZGo6K+i5Lu3CiAgICAgIHdlZWs6ICcnLAogICAgICAvLyDmnIjor6Lku7cKICAgICAgbW9udGg6ICcnLAogICAgICAvLyDnnIHku73mlbDnu4QKICAgICAgcHJvdmluY2VBcnk6IFtdLAogICAgICAvLyDln47luILmlbDnu4QKICAgICAgY2l0eUFyeTogW10sCiAgICAgIC8vIOemgeeUqOWfjuW4gumAieaLqeahhgogICAgICBpc0Rpc2FibGVkMTogdHJ1ZSwKICAgICAgaXNEaXNhYmxlZDI6IHRydWUsCiAgICAgIC8vIOi/meaYr+ihqOWNleeahOaVsOaNrue7keWumuWvueixoQogICAgICBmb3JtTGFiZWxBbGlnbjogewogICAgICAgIG5hbWU6ICcnLAogICAgICAgIHBob25lOiAnJywKICAgICAgICBwcm92aW5jZTogJycsCiAgICAgICAgY2l0eTogJycsCiAgICAgICAgYnJhbmQ6ICcnLAogICAgICAgIHNlcmllczogJycsCiAgICAgICAgdXJsOiBkb2N1bWVudC5yZWZlcnJlcgogICAgICB9LAogICAgICAvLyDot7Povaznu4/plIDllYbpobXpnaLkvKDpgJLnmoTlj4LmlbAKICAgICAgZWRpdEZvcm06IHt9LAogICAgICAvLyDov5nmmK/ooajljZXnmoTpqozor4Hop4TliJnlr7nosaEKICAgICAgcnVsZXM6IHsKICAgICAgICAvLyDpqozor4HmiYvmnLrlj7fmmK/lkKblkIjms5UKICAgICAgICBwaG9uZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpeaJi+acuuWPtycsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9LCB7CiAgICAgICAgICB2YWxpZGF0b3I6IGlzTW9iaWxlCiAgICAgICAgfV0KICAgICAgfSwKICAgICAgLy8g5aSN6YCJ5qGGCiAgICAgIGNoZWNrTGlzdDogW10sCiAgICAgIC8vIOacgOaWsOivouS7twogICAgICBtb2JpbGVBcnk6IFtdLAogICAgICAvLyDovablnosKICAgICAgdGFibGVEYXRhOiBbXSwKICAgICAgdGFibGVEYXRhT2JqOiB7fSwKICAgICAgLy8g5p+l55yL5Y+C5pWw6YWN572uCiAgICAgIGlzUGFyYW1ldGVyOiB0cnVlLAogICAgICAvLyDlr7nor53moYbmlbDmja4KICAgICAgc3BlY2lhbFNhbGVpbmdEaWFsb2dWaXNpYmxlOiBmYWxzZSwKICAgICAgc3BlY2lhbFNhbGVpbmc6IHsKICAgICAgICBjYXJlZnVsOiAnJywKICAgICAgICBuYW1lOiAnJywKICAgICAgICBtb2JpbGU6ICcnLAogICAgICAgIHByb3ZpbmNlOiAnJywKICAgICAgICBjaXR5OiAnJywKICAgICAgICBicmFuZDogJycsCiAgICAgICAgc2VyaWVzOiAnJywKICAgICAgICB1cmw6IGRvY3VtZW50LnJlZmVycmVyCiAgICAgIH0sCiAgICAgIHNwZWNpYWxTYWxlaW5nUnVsZXM6IHsKICAgICAgICAvLyDpqozor4HmiYvmnLrlj7fmmK/lkKblkIjms5UKICAgICAgICBtb2JpbGU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXmiYvmnLrlj7cnLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfSwgewogICAgICAgICAgdmFsaWRhdG9yOiBpc01vYmlsZQogICAgICAgIH1dCiAgICAgIH0sCiAgICAgIC8vIOeCueivhOWGheWuuQogICAgICBjb21tZW50Q29udGVudEFyeTogW10KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyDojrflj5bmsb3ovabkv6Hmga8KICAgIGdldEF1dG9tb2JpbGVJbmZvcm1hdGlvbjogZnVuY3Rpb24gZ2V0QXV0b21vYmlsZUluZm9ybWF0aW9uKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgYnJhbmQsIF95aWVsZCRfdGhpcyQkaHR0cCRwbywgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBicmFuZCA9IEpTT04ucGFyc2UoX3RoaXMuJHJvdXRlLnF1ZXJ5LmlkKS5icmFuZDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRodHRwLnBvc3QoIi9zYWxlL2dldFNhbGUiLCB7CiAgICAgICAgICAgICAgICAgIGJyYW5kOiBicmFuZCwKICAgICAgICAgICAgICAgICAgY2l0eTogd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3NwZWNpYWxTYWxlRGV0YWlscycpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzJCRodHRwJHBvID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIHJlcyA9IF95aWVsZCRfdGhpcyQkaHR0cCRwby5kYXRhOwogICAgICAgICAgICAgICAgX3RoaXMuc3dpcGVyUmFkaW8gPSByZXMuY2hpbGRyZW47IC8vIOWbvueJh+aVsOe7hAoKICAgICAgICAgICAgICAgIF90aGlzLmF1dG9tb2JpbGVJbmZvcm1hdGlvbiA9IHJlczsKICAgICAgICAgICAgICAgIF90aGlzLnJhZGlvID0gSlNPTi5wYXJzZShfdGhpcy4kcm91dGUucXVlcnkuaWQpLnNlcmllcyB8fCBfdGhpcy5hdXRvbW9iaWxlSW5mb3JtYXRpb24uY2hpbGRyZW5bMF0ubGFiZWw7IC8vIOi9puWei+WIl+ihqAoKICAgICAgICAgICAgICAgIF90aGlzLmdldHRhYmxlRGF0YUFyeSgpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5pyI6K+i5Lu3CiAgICBnZXRNb250aDogZnVuY3Rpb24gZ2V0TW9udGgoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGJyYW5kLCBfeWllbGQkX3RoaXMyJCRodHRwJHAsIHJlczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGJyYW5kID0gSlNPTi5wYXJzZShfdGhpczIuJHJvdXRlLnF1ZXJ5LmlkKS5icmFuZDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuJGh0dHAucG9zdCgiL3NhbGUvZ2V0WXhqIiwgewogICAgICAgICAgICAgICAgICBicmFuZDogYnJhbmQsCiAgICAgICAgICAgICAgICAgIGNpdHk6IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdzcGVjaWFsU2FsZURldGFpbHMnKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpczIkJGh0dHAkcCA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3lpZWxkJF90aGlzMiQkaHR0cCRwLmRhdGE7CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXMpCiAgICAgICAgICAgICAgICBfdGhpczIubW9udGggPSByZXM7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOWRqOivouS7twogICAgZ2V0V2VlazogZnVuY3Rpb24gZ2V0V2VlaygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgYnJhbmQsIF95aWVsZCRfdGhpczMkJGh0dHAkcCwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgYnJhbmQgPSBKU09OLnBhcnNlKF90aGlzMy4kcm91dGUucXVlcnkuaWQpLmJyYW5kOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy4kaHR0cC5wb3N0KCIvc2FsZS9nZXRaeGoiLCB7CiAgICAgICAgICAgICAgICAgIGJyYW5kOiBicmFuZCwKICAgICAgICAgICAgICAgICAgY2l0eTogd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3NwZWNpYWxTYWxlRGV0YWlscycpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzMyQkaHR0cCRwID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICByZXMgPSBfeWllbGQkX3RoaXMzJCRodHRwJHAuZGF0YTsKICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlcykKICAgICAgICAgICAgICAgIF90aGlzMy53ZWVrID0gcmVzOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDojrflj5bnnIHku70KICAgIGdldFByb3ZpbmNlOiBmdW5jdGlvbiBnZXRQcm92aW5jZSgpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICB2YXIgX3lpZWxkJF90aGlzNCQkaHR0cCRwLCByZXM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LiRodHRwLnBvc3QoJy9hcmVhL3Nob3dQcm92aW5jZScpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfeWllbGQkX3RoaXM0JCRodHRwJHAgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIHJlcyA9IF95aWVsZCRfdGhpczQkJGh0dHAkcC5kYXRhOwogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzKQogICAgICAgICAgICAgICAgX3RoaXM0LnByb3ZpbmNlQXJ5ID0gcmVzOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDojrflj5bln47luIIKICAgIGNoYW5nZTogZnVuY3Rpb24gY2hhbmdlKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgICAgIHZhciBfeWllbGQkX3RoaXM1JCRodHRwJHAsIHJlczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF90aGlzNS5pc0Rpc2FibGVkMSA9IGZhbHNlOwogICAgICAgICAgICAgICAgX3RoaXM1LmZvcm1MYWJlbEFsaWduLmNpdHkgPSAnJzsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczUuJGh0dHAucG9zdCgnL2FyZWEvc2hvd0NpdHknLCB7CiAgICAgICAgICAgICAgICAgIHByb3ZpbmNlaWQ6IF90aGlzNS5mb3JtTGFiZWxBbGlnbi5wcm92aW5jZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpczUkJGh0dHAkcCA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3lpZWxkJF90aGlzNSQkaHR0cCRwLmRhdGE7CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXMpCiAgICAgICAgICAgICAgICBfdGhpczUuY2l0eUFyeSA9IHJlczsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5pS55Y+Y5Y2V6YCJ5qGG6L2m5Z6LCiAgICBjaGFuZ2VUeXBlOiBmdW5jdGlvbiBjaGFuZ2VUeXBlKGluZGV4KSB7CiAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gaW5kZXg7CiAgICAgIHRoaXMuZ2V0dGFibGVEYXRhQXJ5KCk7CiAgICB9LAogICAgLy8g54K55Ye75oiR6KaB6K+i5Lu35oyJ6ZKuCiAgICBvblN1Ym1pdEZvcm06IGZ1bmN0aW9uIG9uU3VibWl0Rm9ybSgpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICBpZiAodGhpcy5yYWRpbyA9PT0gJycpIHsKICAgICAgICByZXR1cm4gdGhpcy4kbWVzc2FnZS5lcnJvcign6K+36YCJ5oup6L2m57O7Jyk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmZvcm1MYWJlbEFsaWduLnVzZXJuYW1lID09PSAnJyB8fCB0aGlzLmZvcm1MYWJlbEFsaWduLnByb3ZpbmNlID09PSAnJyB8fCB0aGlzLmZvcm1MYWJlbEFsaWduLmNpdHkgPT09ICcnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+ivt+WujOWWhOihqOWNleWGheWuuScpOwogICAgICB9IC8vIGNvbnNvbGUubG9nKHRoaXMuZm9ybUxhYmVsQWxpZ24udXNlcm5hbWUpCgoKICAgICAgdGhpcy4kcmVmcy5ydWxlRm9ybS52YWxpZGF0ZSggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYodmFsaWQpIHsKICAgICAgICAgIHZhciBicmFuZCwgcmVzOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgYnJhbmQgPSBKU09OLnBhcnNlKF90aGlzNi4kcm91dGUucXVlcnkuaWQpLmJyYW5kOwoKICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZCkgewogICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIF90aGlzNi5mb3JtTGFiZWxBbGlnbi5icmFuZCA9IGJyYW5kOwogICAgICAgICAgICAgICAgICBfdGhpczYuZm9ybUxhYmVsQWxpZ24uc2VyaWVzID0gX3RoaXM2LnJhZGlvOyAvLyDmj5DkuqTlkI7lj7DmlbDmja4KCiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNi4kaHR0cC5wb3N0KCcvc2FsZS9hZGRFbnF1aXJ5MicsIF90aGlzNi5mb3JtTGFiZWxBbGlnbik7CgogICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDYuc2VudDsKCiAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT09IDIwMCB8fCByZXMuZGF0YSAhPT0gdHJ1ZSkpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBfdGhpczYuJG1lc3NhZ2UuZXJyb3IoJ+aPkOS6pOWksei0pScpKTsKCiAgICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAgIF90aGlzNi4kbWVzc2FnZS5zdWNjZXNzKCfmj5DkuqTmiJDlip8nKTsKCiAgICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlNik7CiAgICAgICAgfSkpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0oKSk7CiAgICB9LAogICAgLy8g5pyA5paw6K+i5Lu36KGo5qC8CiAgICBnZXRtb2JpbGVMaXN0OiBmdW5jdGlvbiBnZXRtb2JpbGVMaXN0KCkgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICAgIHZhciBfeWllbGQkX3RoaXM3JCRodHRwJHAsIHJlczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczcuJGh0dHAucG9zdCgnL3NhbGUvZ2V0TmV3ZW5xJyk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpczckJGh0dHAkcCA9IF9jb250ZXh0Ny5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3lpZWxkJF90aGlzNyQkaHR0cCRwLmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczcubW9iaWxlQXJ5ID0gcmVzOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTcpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDovablnovliJfooagKICAgIGdldHRhYmxlRGF0YUFyeTogZnVuY3Rpb24gZ2V0dGFibGVEYXRhQXJ5KCkgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkgewogICAgICAgIHZhciBicmFuZCwgX3lpZWxkJF90aGlzOCQkaHR0cCRwLCByZXM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBicmFuZCA9IEpTT04ucGFyc2UoX3RoaXM4LiRyb3V0ZS5xdWVyeS5pZCkuYnJhbmQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM4LiRodHRwLnBvc3QoIi9zYWxlL2dldFNhbGVDaGUiLCB7CiAgICAgICAgICAgICAgICAgIGJyYW5kOiBicmFuZCwKICAgICAgICAgICAgICAgICAgc2VyaWVzOiBfdGhpczgucmFkaW8KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfeWllbGQkX3RoaXM4JCRodHRwJHAgPSBfY29udGV4dDguc2VudDsKICAgICAgICAgICAgICAgIHJlcyA9IF95aWVsZCRfdGhpczgkJGh0dHAkcC5kYXRhOwogICAgICAgICAgICAgICAgX3RoaXM4LnRhYmxlRGF0YSA9IHJlczsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g6Kej6Zmk56aB55SoCiAgICBjaGFuZ2VpbmRleDogZnVuY3Rpb24gY2hhbmdlaW5kZXgoKSB7CiAgICAgIHZhciBfdGhpczkgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoKSB7CiAgICAgICAgdmFyIF95aWVsZCRfdGhpczkkJGh0dHAkcCwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX3RoaXM5LmlzRGlzYWJsZWQyID0gZmFsc2U7CiAgICAgICAgICAgICAgICBfdGhpczkuc3BlY2lhbFNhbGVpbmcuY2l0eSA9ICcnOwogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzOS4kaHR0cC5wb3N0KCcvYXJlYS9zaG93Q2l0eScsIHsKICAgICAgICAgICAgICAgICAgcHJvdmluY2VpZDogX3RoaXM5LnNwZWNpYWxTYWxlaW5nLnByb3ZpbmNlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzOSQkaHR0cCRwID0gX2NvbnRleHQ5LnNlbnQ7CiAgICAgICAgICAgICAgICByZXMgPSBfeWllbGQkX3RoaXM5JCRodHRwJHAuZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzOS5jaXR5QXJ5ID0gcmVzOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTkpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDngrnlh7vmn6XnnIvmjInpkq4KICAgIHNlZTogZnVuY3Rpb24gc2VlKGluZGV4KSB7CiAgICAgIC8vIOmakOiXj+axvei9puWIl+ihqAogICAgICB0aGlzLmlzUGFyYW1ldGVyID0gZmFsc2U7IC8vIOiOt+WPluWPguaVsOmFjee9rumhuQoKICAgICAgdGhpcy50YWJsZURhdGFPYmogPSB0aGlzLnRhYmxlRGF0YVtpbmRleF0ubzsKICAgIH0sCiAgICAvLyDngrnlh7vnibnljZbku7fmjInpkq4KICAgIGRpYWxvZ1Zpc2libGVpbmc6IGZ1bmN0aW9uIGRpYWxvZ1Zpc2libGVpbmcoYikgewogICAgICB0aGlzLnNwZWNpYWxTYWxlaW5nRGlhbG9nVmlzaWJsZSA9IHRydWU7IC8vIOWxleekuuWvueivneahhgoKICAgICAgdGhpcy5zcGVjaWFsU2FsZWluZy5jYXJlZnVsID0gYjsKICAgIH0sCiAgICAvLyDngrnlh7vlr7nor53moYbnoa7orqQKICAgIHNwZWNpYWxTYWxlaW5nVXNlckluZm86IGZ1bmN0aW9uIHNwZWNpYWxTYWxlaW5nVXNlckluZm8oKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKCiAgICAgIGlmICh0aGlzLnNwZWNpYWxTYWxlaW5nLm5hbWUgPT09ICcnIHx8IHRoaXMuc3BlY2lhbFNhbGVpbmcucHJvdmluY2UgPT09ICcnIHx8IHRoaXMuc3BlY2lhbFNhbGVpbmcuY2l0eSA9PT0gJycpIHsKICAgICAgICByZXR1cm4gdGhpcy4kbWVzc2FnZS5lcnJvcign6K+35a6M5ZaE5YaF5a65Jyk7CiAgICAgIH0KCiAgICAgIHRoaXMuJHJlZnMuc3BlY2lhbFNhbGVpbmdSZWYudmFsaWRhdGUoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTAodmFsaWQpIHsKICAgICAgICAgIHZhciBicmFuZCwgcmVzOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgIGJyYW5kID0gSlNPTi5wYXJzZShfdGhpczEwLiRyb3V0ZS5xdWVyeS5pZCkuYnJhbmQ7CgogICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgX3RoaXMxMC5zcGVjaWFsU2FsZWluZy5icmFuZCA9IGJyYW5kOwogICAgICAgICAgICAgICAgICBfdGhpczEwLnNwZWNpYWxTYWxlaW5nLnNlcmllcyA9IF90aGlzMTAucmFkaW87IC8vIOaPkOS6pOWQjuWPsOaVsOaNrgoKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTAuJGh0dHAucG9zdCgnL3NhbGUvYWRkRW5xdWlyeTInLCBfdGhpczEwLnNwZWNpYWxTYWxlaW5nKTsKCiAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0MTAuc2VudDsKCiAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT09IDIwMCB8fCByZXMuZGF0YSAhPT0gdHJ1ZSkpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuYWJydXB0KCJyZXR1cm4iLCBfdGhpczEwLiRtZXNzYWdlLmVycm9yKCfmj5DkuqTlpLHotKUnKSk7CgogICAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgICAgX3RoaXMxMC4kbWVzc2FnZS5zdWNjZXNzKCfmj5DkuqTmiJDlip8nKTsKCiAgICAgICAgICAgICAgICAgIF90aGlzMTAuc3BlY2lhbFNhbGVpbmdEaWFsb2dWaXNpYmxlID0gZmFsc2U7CgogICAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUxMCk7CiAgICAgICAgfSkpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MikgewogICAgICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgICAgfSgpKTsKICAgIH0sCiAgICAvLyDov5Tlm57kuLvpobXpnaIKICAgIHJldHVybk1haW46IGZ1bmN0aW9uIHJldHVybk1haW4oKSB7CiAgICAgIHRoaXMuaXNQYXJhbWV0ZXIgPSB0cnVlOwogICAgfSwKICAgIC8vIOS5sOWutueCueivhOaVsOaNrgogICAgZ2V0QnV5ZXJzQ29tbWVudHNMaXN0OiBmdW5jdGlvbiBnZXRCdXllcnNDb21tZW50c0xpc3QoKSB7CiAgICAgIHZhciBfdGhpczExID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMSgpIHsKICAgICAgICB2YXIgYnJhbmQsIF95aWVsZCRfdGhpczExJCRodHRwJCwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTExJChfY29udGV4dDExKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTEucHJldiA9IF9jb250ZXh0MTEubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGJyYW5kID0gSlNPTi5wYXJzZShfdGhpczExLiRyb3V0ZS5xdWVyeS5pZCkuYnJhbmQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTEuJGh0dHAucG9zdCgnL3NhbGUvZ2V0RHAnLCB7CiAgICAgICAgICAgICAgICAgIGJyYW5kOiBicmFuZAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpczExJCRodHRwJCA9IF9jb250ZXh0MTEuc2VudDsKICAgICAgICAgICAgICAgIHJlcyA9IF95aWVsZCRfdGhpczExJCRodHRwJC5kYXRhOwogICAgICAgICAgICAgICAgX3RoaXMxMS5jb21tZW50Q29udGVudEFyeSA9IHJlczsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTEpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBwb3N0TGlzdDogZnVuY3Rpb24gcG9zdExpc3QoaWQpIHsKICAgICAgdmFyIF90aGlzJCRyb3V0ZXIkcmVzb2x2ZSA9IHRoaXMuJHJvdXRlci5yZXNvbHZlKHsKICAgICAgICBwYXRoOiAnL2ZvcnVtL3Bvc3QvZGV0YWlscycsCiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIGlkOiBpZAogICAgICAgIH0KICAgICAgfSksCiAgICAgICAgICBocmVmID0gX3RoaXMkJHJvdXRlciRyZXNvbHZlLmhyZWY7CgogICAgICB3aW5kb3cub3BlbihocmVmLCAnX2JsYW5rJyk7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgLy8g6I635Y+W55yB5Lu95L+h5oGvCiAgICB0aGlzLmdldFByb3ZpbmNlKCk7IC8vIOacgOaWsOivouS7t+ihqOagvAoKICAgIHRoaXMuZ2V0bW9iaWxlTGlzdCgpOyAvLyDkubDlrrbngrnor4QKCiAgICB0aGlzLmdldEJ1eWVyc0NvbW1lbnRzTGlzdCgpOyAvLyDojrflj5blvZPliY3ml6XmnJ8KCiAgICB2YXIgbXlEYXRlID0gbmV3IERhdGUoKTsKICAgIHRoaXMubW9udGhEYXRlID0gbXlEYXRlLmdldE1vbnRoKCkgKyAxOwogICAgdGhpcy5kYXlEYXRlID0gbXlEYXRlLmdldERhdGUoKTsKICAgIHZhciB3ZWVrcyA9IFsn5pif5pyf5pelJywgJ+aYn+acn+S4gCcsICfmmJ/mnJ/kuownLCAn5pif5pyf5LiJJywgJ+aYn+acn+WbmycsICfmmJ/mnJ/kupQnLCAn5pif5pyf5YWtJ107CiAgICB0aGlzLndlZWtEYXRlID0gd2Vla3NbbXlEYXRlLmdldERheSgpXTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMxMiA9IHRoaXM7CgogICAgdmFyIGdlb2xvY2F0aW9uID0gbmV3IEJNYXAuR2VvbG9jYXRpb24oKTsKICAgIGdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihmdW5jdGlvbiAocikgewogICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnc3BlY2lhbFNhbGVEZXRhaWxzJywgci5hZGRyZXNzLmNpdHkpOwogICAgICBfdGhpczEyLnNwZWNpYUxhY3Rpb24gPSByLmFkZHJlc3MuY2l0eTsgLy8g6I635Y+W5rG96L2m5L+h5oGvCgogICAgICBfdGhpczEyLmdldEF1dG9tb2JpbGVJbmZvcm1hdGlvbigpOyAvLyDmnIjor6Lku7cKCgogICAgICBfdGhpczEyLmdldE1vbnRoKCk7IC8vIOWRqOivouS7twoKCiAgICAgIF90aGlzMTIuZ2V0V2VlaygpOwogICAgfSwgewogICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWUKICAgIH0pOwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGNsYXNzT3B0aW9uOiBmdW5jdGlvbiBjbGFzc09wdGlvbigpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBzdGVwOiAwLjUsCiAgICAgICAgbGltaXRNb3ZlTnVtOiA1CiAgICAgIH07CiAgICB9CiAgfQp9Ow=="},null]}