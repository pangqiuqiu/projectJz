{"remainingRequest":"D:\\myCompany\\zhongdianqiche\\car\\node_modules\\thread-loader\\dist\\cjs.js!D:\\myCompany\\zhongdianqiche\\car\\node_modules\\babel-loader\\lib\\index.js!D:\\myCompany\\zhongdianqiche\\car\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\myCompany\\zhongdianqiche\\car\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\myCompany\\zhongdianqiche\\car\\src\\views\\Main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\myCompany\\zhongdianqiche\\car\\src\\views\\Main.vue","mtime":1611326892507},{"path":"D:\\myCompany\\zhongdianqiche\\car\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\car\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\car\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\car\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\car\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}