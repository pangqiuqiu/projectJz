{"remainingRequest":"H:\\jz\\w\\zhong\\car\\node_modules\\thread-loader\\dist\\cjs.js!H:\\jz\\w\\zhong\\car\\node_modules\\babel-loader\\lib\\index.js!H:\\jz\\w\\zhong\\car\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!H:\\jz\\w\\zhong\\car\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!H:\\jz\\w\\zhong\\car\\src\\views\\substation\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"H:\\jz\\w\\zhong\\car\\src\\views\\substation\\Home.vue","mtime":1617090966276},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0iOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJIOi9qei93L3pob25nL2Nhci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9IZWFkZXInOwppbXBvcnQgRm9vdGVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvRm9vdGVyJzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIEhlYWRlcjogSGVhZGVyLAogICAgRm9vdGVyOiBGb290ZXIKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICAvLyDlvZPliY3ln47luIIKICAgICAgbG9jYXRpb246IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3NlbGVjdENpdHknKSB8fCBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdMb2NhdGlvbkNpdHknKSwKICAgICAgY2l0eUxpc3Q6IFtdLAogICAgICAvLyDova7mkq3lm77mlbDnu4QKICAgICAgc3dpcGVyTGlzdDogW10sCiAgICAgIC8vIOaWh+Wtl+i1hOiur+aVsOe7hAogICAgICB3cml0dGVuSW5mb3JMaXN0OiBbXSwKICAgICAgLy8g54Ot6Zeo6L2m5Z6LCiAgICAgIGhvdE1vZGVsOiBbXSwKICAgICAgLy8g6L2m5biC5oql5Lu3CiAgICAgIHRpdGxlTGlzdDogWyfmnIDmlrDmiqXku7cnLCAnOOS4h+S7peS4iycsICc4LTEy5LiHJywgJzEyLTE45LiHJywgJzE4LTI15LiHJywgJzI1LTQw5LiHJywgJzQw5LiH5Lul5LiKJ10sCiAgICAgIHRpdGxlczogJ+acgOaWsOaKpeS7tycsCiAgICAgIHRhYmxlRGF0YTogW10sCiAgICAgIGN1cnJlbnRUaXRsZUluZGV4OiAwLAogICAgICAvLyDnlKjmiLfkv6Hmga/lr7nor53moYYKICAgICAgZm9ybUxhYmVsV2lkdGg6ICcxMDBweCcsCiAgICAgIGZvcm1BbGlnbjogewogICAgICAgIG5hbWU6ICcnLAogICAgICAgIHBob25lOiAnJywKICAgICAgICBjaXR5OiAnJywKICAgICAgICBjYXJJZDogJycsCiAgICAgICAgZGVhbGVySWQ6ICcnLAogICAgICAgIHNlcmllczogJycsCiAgICAgICAgdHlwZTogJ+iOt+WPluW6leS7tycKICAgICAgfSwKICAgICAgZGlhbG9nRm9ybVZpc2libGU6IGZhbHNlLAogICAgICAvLyDllYblrrbkv4PplIAKICAgICAgcHJvbW90aW9uTGlzdDogW10sCiAgICAgIHBhZ2VTaXplOiA4LAogICAgICBwYWdlTm86IDEsCiAgICAgIC8vIOaOqOiNkOe7j+mUgOWVhgogICAgICByZWNvbW1lbmRMaXN0OiBbXSwKICAgICAgLy8g5bqV6YOo6LWE6K6vCiAgICAgIGhvdEluZm9yOiBbXSwKICAgICAgZGlzY291bnQ6IFtdLAogICAgICBidXNpbmVzczogW10sCiAgICAgIC8vIOW5v+WRiuaooeWdlwogICAgICBhZHYxOiB7fSwKICAgICAgLy8g5LiK6YCa5qCPCiAgICAgIGFkdjI6IHt9LAogICAgICAvLyDkuIvpgJrmoI8KICAgICAgYWR2Mzoge30sCiAgICAgIC8vIOS/g+mUgOW5v+WRigogICAgICBhZHZMaXN0OiBbXSwKICAgICAgLy8g5Z+O5biC5YiH5o2iCiAgICAgIGRpYWxvZ0Zvcm06IGZhbHNlCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC8vIOWIpOaWreivouS7t+ihqOWNleaMiemSrgogICAgZGlzYWJsZWQ6IGZ1bmN0aW9uIGRpc2FibGVkKCkgewogICAgICBpZiAodGhpcy5mb3JtQWxpZ24ubmFtZS50cmltKCkubGVuZ3RoICE9PSAwICYmIC9eMVszNDU2Nzg5XVxkezl9JC8udGVzdCh0aGlzLmZvcm1BbGlnbi5waG9uZSkpIHJldHVybiBmYWxzZTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyDngrnlh7tMb2dv5Zue5Yiw6aaW6aG1CiAgICBpbWFnZTogZnVuY3Rpb24gaW1hZ2UoKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvaG9tZScpOwogICAgfSwKICAgIC8vIOiOt+WPlueEpueCueWbvgogICAgZ2V0U3dpcGVyTGlzdDogZnVuY3Rpb24gZ2V0U3dpcGVyTGlzdCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIF95aWVsZCRfdGhpcyQkaHR0cCRwbywgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy4kaHR0cC5wb3N0KCcvSW5mb3Ivc3Vic3RhdGlvbkxiJywgewogICAgICAgICAgICAgICAgICBjaXR5OiBfdGhpcy5sb2NhdGlvbgogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpcyQkaHR0cCRwbyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICByZXMgPSBfeWllbGQkX3RoaXMkJGh0dHAkcG8uZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzLnN3aXBlckxpc3QgPSByZXM7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDojrflj5bnhKbngrnotYTorq8KICAgIGdldFRvZGF5SW5mbzogZnVuY3Rpb24gZ2V0VG9kYXlJbmZvKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBfeWllbGQkX3RoaXMyJCRodHRwJHAsIHJlczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuJGh0dHAucG9zdCgnL0luZm9yL3N1YnN0YXRpb25KZCcsIHsKICAgICAgICAgICAgICAgICAgY2l0eTogX3RoaXMyLmxvY2F0aW9uCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzMiQkaHR0cCRwID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICByZXMgPSBfeWllbGQkX3RoaXMyJCRodHRwJHAuZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzMi53cml0dGVuSW5mb3JMaXN0ID0gcmVzOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDojrflj5bng63pl6jovablnosKICAgIGdldEhvdENhcjogZnVuY3Rpb24gZ2V0SG90Q2FyKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciBfeWllbGQkX3RoaXMzJCRodHRwJHAsIHJlczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuJGh0dHAucG9zdCgnL2Nhci9ob3RTZXJpZXMnKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzMyQkaHR0cCRwID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICByZXMgPSBfeWllbGQkX3RoaXMzJCRodHRwJHAuZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzMy5ob3RNb2RlbCA9IHJlczsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgY2FyRGV0YWlsczogZnVuY3Rpb24gY2FyRGV0YWlscyhzZXJpZXMpIHsKICAgICAgdmFyIF90aGlzJCRyb3V0ZXIkcmVzb2x2ZSA9IHRoaXMuJHJvdXRlci5yZXNvbHZlKHsKICAgICAgICBwYXRoOiAnL2F1dG9tb2JpbGUvZGV0YWlscy9kZXRhaWxzaG9tZScKICAgICAgfSksCiAgICAgICAgICBocmVmID0gX3RoaXMkJHJvdXRlciRyZXNvbHZlLmhyZWY7CgogICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnY2FyRGV0YWlscycsIHNlcmllcyk7CiAgICAgIHdpbmRvdy5vcGVuKGhyZWYsICdfYmxhbmsnKTsKICAgIH0sCiAgICAvLyDojrflj5bovabluILmiqXku7cKICAgIGdldFRhYmxlRGF0YTogZnVuY3Rpb24gZ2V0VGFibGVEYXRhKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBfeWllbGQkX3RoaXM0JCRodHRwJHAsIHJlczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQuJGh0dHAucG9zdCgnL2RlYWxlci9jYXJPZmZlckJ5Q2l0eScsIHsKICAgICAgICAgICAgICAgICAgcHJpY2U6IF90aGlzNC50aXRsZXMsCiAgICAgICAgICAgICAgICAgIGNpdHk6IF90aGlzNC5sb2NhdGlvbgogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpczQkJGh0dHAkcCA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3lpZWxkJF90aGlzNCQkaHR0cCRwLmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczQudGFibGVEYXRhID0gcmVzOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDojrflj5bllYblrrbkv4PplIAKICAgIGdldFByb21vdGlvbkxpc3Q6IGZ1bmN0aW9uIGdldFByb21vdGlvbkxpc3QoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgdmFyIF95aWVsZCRfdGhpczUkJGh0dHAkcCwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNS4kaHR0cC5wb3N0KCcvSW5mb3Ivc2FsZXMnLCB7CiAgICAgICAgICAgICAgICAgIGNpdHk6IF90aGlzNS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgcGFnZVNpemU6IF90aGlzNS5wYWdlU2l6ZSwKICAgICAgICAgICAgICAgICAgcGFnZU5vOiBfdGhpczUucGFnZU5vCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzNSQkaHR0cCRwID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgICAgICByZXMgPSBfeWllbGQkX3RoaXM1JCRodHRwJHAuZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzNS5wcm9tb3Rpb25MaXN0ID0gcmVzOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDojrflj5bmjqjojZDnu4/plIDllYYKICAgIGdldFJlY29tbWVuZExpc3Q6IGZ1bmN0aW9uIGdldFJlY29tbWVuZExpc3QoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgdmFyIF95aWVsZCRfdGhpczYkJGh0dHAkcCwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNi4kaHR0cC5wb3N0KCcvZGVhbGVyL2dldERlYWxlckJ5Q2l0eScsIHsKICAgICAgICAgICAgICAgICAgY2l0eTogX3RoaXM2LmxvY2F0aW9uCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzNiQkaHR0cCRwID0gX2NvbnRleHQ2LnNlbnQ7CiAgICAgICAgICAgICAgICByZXMgPSBfeWllbGQkX3RoaXM2JCRodHRwJHAuZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzNi5yZWNvbW1lbmRMaXN0ID0gcmVzOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBkZWFsZXJEZXRhaWxzOiBmdW5jdGlvbiBkZWFsZXJEZXRhaWxzKGlkKSB7CiAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdkaXN0cmlidXRvcklkJywgaWQpOwoKICAgICAgdmFyIF90aGlzJCRyb3V0ZXIkcmVzb2x2ZTIgPSB0aGlzLiRyb3V0ZXIucmVzb2x2ZSh7CiAgICAgICAgcGF0aDogJy9kaXN0ci9tYWluJywKICAgICAgICBxdWVyeTogewogICAgICAgICAgaWQ6IGlkCiAgICAgICAgfQogICAgICB9KSwKICAgICAgICAgIGhyZWYgPSBfdGhpcyQkcm91dGVyJHJlc29sdmUyLmhyZWY7CgogICAgICB3aW5kb3cub3BlbihocmVmLCAnX2JsYW5rJyk7CiAgICB9LAogICAgLy8g6I635Y+W54Ot6Zeo6LWE6K6vCiAgICBnZXRIb3RJbmZvcjogZnVuY3Rpb24gZ2V0SG90SW5mb3IoKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgdmFyIF95aWVsZCRfdGhpczckJGh0dHAkcCwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNy4kaHR0cC5wb3N0KCcvSW5mb3IvaG90SW5mb3InLCB7CiAgICAgICAgICAgICAgICAgIGNpdHk6IF90aGlzNy5sb2NhdGlvbgogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF95aWVsZCRfdGhpczckJGh0dHAkcCA9IF9jb250ZXh0Ny5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3lpZWxkJF90aGlzNyQkaHR0cCRwLmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczcuaG90SW5mb3IgPSByZXM7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGdldERpc2NvdW50OiBmdW5jdGlvbiBnZXREaXNjb3VudCgpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOCgpIHsKICAgICAgICB2YXIgX3lpZWxkJF90aGlzOCQkaHR0cCRwLCByZXM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM4LiRodHRwLnBvc3QoJy9JbmZvci9ocXloJywgewogICAgICAgICAgICAgICAgICBjaXR5OiBfdGhpczgubG9jYXRpb24KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfeWllbGQkX3RoaXM4JCRodHRwJHAgPSBfY29udGV4dDguc2VudDsKICAgICAgICAgICAgICAgIHJlcyA9IF95aWVsZCRfdGhpczgkJGh0dHAkcC5kYXRhOwogICAgICAgICAgICAgICAgX3RoaXM4LmRpc2NvdW50ID0gcmVzOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTgpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRCdXNpbmVzczogZnVuY3Rpb24gZ2V0QnVzaW5lc3MoKSB7CiAgICAgIHZhciBfdGhpczkgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoKSB7CiAgICAgICAgdmFyIF95aWVsZCRfdGhpczkkJGh0dHAkcCwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzOS4kaHR0cC5wb3N0KCcvSW5mb3Ivc2pkdCcsIHsKICAgICAgICAgICAgICAgICAgY2l0eTogX3RoaXM5LmxvY2F0aW9uCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzOSQkaHR0cCRwID0gX2NvbnRleHQ5LnNlbnQ7CiAgICAgICAgICAgICAgICByZXMgPSBfeWllbGQkX3RoaXM5JCRodHRwJHAuZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzOS5idXNpbmVzcyA9IHJlczsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU5KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g6I635Y+W6aG16Z2i5bm/5ZGK5pWw5o2uCiAgICBnZXRBZHZlcnRpc2VtZW50OiBmdW5jdGlvbiBnZXRBZHZlcnRpc2VtZW50KCkgewogICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTAoKSB7CiAgICAgICAgdmFyIF95aWVsZCRfdGhpczEwJCRodHRwJCwgcmVzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxMC4kaHR0cC5wb3N0KCcvYWR2L2dldEFkdicsIHsKICAgICAgICAgICAgICAgICAgbmFtZTogW3sKICAgICAgICAgICAgICAgICAgICBuYW1lOiAn5YiG56uZ5LiK6YCa5qCPJywKICAgICAgICAgICAgICAgICAgICBhcmVhOiBfdGhpczEwLmxvY2F0aW9uCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAn5YiG56uZ5LiL6YCa5qCPJywKICAgICAgICAgICAgICAgICAgICBhcmVhOiBfdGhpczEwLmxvY2F0aW9uCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAn5L+D6ZSA5bm/5ZGKJywKICAgICAgICAgICAgICAgICAgICBhcmVhOiBfdGhpczEwLmxvY2F0aW9uCiAgICAgICAgICAgICAgICAgIH1dCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzMTAkJGh0dHAkID0gX2NvbnRleHQxMC5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3lpZWxkJF90aGlzMTAkJGh0dHAkLmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczEwLmFkdkxpc3QgPSByZXM7CiAgICAgICAgICAgICAgICBfdGhpczEwLmFkdjEgPSByZXNbMF07CiAgICAgICAgICAgICAgICBfdGhpczEwLmFkdjIgPSByZXNbMV07CiAgICAgICAgICAgICAgICBfdGhpczEwLmFkdjMgPSByZXNbMl07CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEwKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5YiH5o2i5a6a5L2N5Z+O5biCCiAgICBjaGFuZ2VMb2NhdGlvbjogZnVuY3Rpb24gY2hhbmdlTG9jYXRpb24oKSB7CiAgICAgIHZhciBfdGhpczExID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMSgpIHsKICAgICAgICB2YXIgX3lpZWxkJF90aGlzMTEkJGh0dHAkLCByZXM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTEkKF9jb250ZXh0MTEpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczExLiRodHRwLnBvc3QoJy9hcmVhL2hvdENpdHknKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3lpZWxkJF90aGlzMTEkJGh0dHAkID0gX2NvbnRleHQxMS5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gX3lpZWxkJF90aGlzMTEkJGh0dHAkLmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczExLmNpdHlMaXN0ID0gcmVzOwogICAgICAgICAgICAgICAgX3RoaXMxMS5kaWFsb2dGb3JtID0gdHJ1ZTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTEpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBzZWxlY3RDaXR5OiBmdW5jdGlvbiBzZWxlY3RDaXR5KGEpIHsKICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ3NlbGVjdENpdHknLCBhKTsKICAgICAgdGhpcy5kaWFsb2dGb3JtID0gZmFsc2U7CiAgICAgIHRoaXMuJHJvdXRlci5nbygwKTsKICAgIH0sCiAgICAvLyDngrnlh7vlub/lkYrot7PovawKICAgIGp1bXBBZHZlcnRpc2VtZW50OiBmdW5jdGlvbiBqdW1wQWR2ZXJ0aXNlbWVudChpZCkgewogICAgICBpZiAoaWQuaW5kZXhPZignaHR0cHM6Ly8nKSA+IC0xKSB7CiAgICAgICAgd2luZG93Lm9wZW4oIiIuY29uY2F0KGlkKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgd2luZG93Lm9wZW4oImh0dHA6Ly8iLmNvbmNhdChpZCkpOwogICAgICB9CiAgICB9LAogICAgLy8g57uP6ZSA5ZWG55m75b2VCiAgICBhZG1pbjogZnVuY3Rpb24gYWRtaW4oKSB7CiAgICAgIHdpbmRvdy5vcGVuKCdodHRwczovL3d3dy56aG9uZ2RpYW5xaWNoZS5jb20vbWFuYWdlJyk7CiAgICB9LAogICAgLy8g54K55Ye76LWE6K6v6Lez6L2sCiAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoaXRlbSkgewogICAgICBpZiAoaXRlbS5zaWduID09PSAn6LWE6K6vJykgewogICAgICAgIHZhciBfdGhpcyQkcm91dGVyJHJlc29sdmUzID0gdGhpcy4kcm91dGVyLnJlc29sdmUoewogICAgICAgICAgcGF0aDogJy9hdXRvbW90aXZlbG5mb3JtYXRpb24vZGV0YWlscycsCiAgICAgICAgICBxdWVyeTogewogICAgICAgICAgICBpZDogaXRlbS5pZAogICAgICAgICAgfQogICAgICAgIH0pLAogICAgICAgICAgICBocmVmID0gX3RoaXMkJHJvdXRlciRyZXNvbHZlMy5ocmVmOwoKICAgICAgICB3aW5kb3cub3BlbihocmVmLCAnX2JsYW5rJyk7CiAgICAgIH0gZWxzZSBpZiAoaXRlbS5zaWduID09PSAn6KeG6aKRJykgewogICAgICAgIHZhciBfdGhpcyQkcm91dGVyJHJlc29sdmU0ID0gdGhpcy4kcm91dGVyLnJlc29sdmUoewogICAgICAgICAgcGF0aDogJy92aWRlby9kZXRhaWxzJywKICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgIGlkOiBpdGVtLmlkCiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgICAgIF9ocmVmID0gX3RoaXMkJHJvdXRlciRyZXNvbHZlNC5ocmVmOwoKICAgICAgICB3aW5kb3cub3BlbihfaHJlZiwgJ19ibGFuaycpOwogICAgICB9IGVsc2UgaWYgKGl0ZW0uc2lnbiA9PT0gJ+W4luWtkCcpIHsKICAgICAgICB2YXIgX3RoaXMkJHJvdXRlciRyZXNvbHZlNSA9IHRoaXMuJHJvdXRlci5yZXNvbHZlKHsKICAgICAgICAgIHBhdGg6ICcvZm9ydW0vcG9zdC9kZXRhaWxzJywKICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgIGlkOiBpdGVtLmlkCiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgICAgIF9ocmVmMiA9IF90aGlzJCRyb3V0ZXIkcmVzb2x2ZTUuaHJlZjsKCiAgICAgICAgd2luZG93Lm9wZW4oX2hyZWYyLCAnX2JsYW5rJyk7CiAgICAgIH0gZWxzZSBpZiAoaXRlbS5zaWduID09PSAn6YeN54K55Y+36LWE6K6vJykgewogICAgICAgIHZhciBfdGhpcyQkcm91dGVyJHJlc29sdmU2ID0gdGhpcy4kcm91dGVyLnJlc29sdmUoewogICAgICAgICAgcGF0aDogJy9tZWRpYS9kZXRhaWxzL2luZm9yJywKICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgIGlkOiBpdGVtLmtleU5JZAogICAgICAgICAgfQogICAgICAgIH0pLAogICAgICAgICAgICBfaHJlZjMgPSBfdGhpcyQkcm91dGVyJHJlc29sdmU2LmhyZWY7CgogICAgICAgIHdpbmRvdy5vcGVuKF9ocmVmMywgJ19ibGFuaycpOwogICAgICB9IGVsc2UgaWYgKGl0ZW0uc2lnbiA9PT0gJ+mHjeeCueWPt+inhumikScpIHsKICAgICAgICB2YXIgX3RoaXMkJHJvdXRlciRyZXNvbHZlNyA9IHRoaXMuJHJvdXRlci5yZXNvbHZlKHsKICAgICAgICAgIHBhdGg6ICcvbWVkaWEvZGV0YWlscy92aWRlbycsCiAgICAgICAgICBxdWVyeTogewogICAgICAgICAgICBpZDogaXRlbS5rZXlOSWQKICAgICAgICAgIH0KICAgICAgICB9KSwKICAgICAgICAgICAgX2hyZWY0ID0gX3RoaXMkJHJvdXRlciRyZXNvbHZlNy5ocmVmOwoKICAgICAgICB3aW5kb3cub3BlbihfaHJlZjQsICdfYmxhbmsnKTsKICAgICAgfQogICAgfSwKICAgIC8vIOWIh+aNouagh+mimAogICAgY2hhbmdlVGl0bGU6IGZ1bmN0aW9uIGNoYW5nZVRpdGxlKGl0ZW0sIGluZGV4KSB7CiAgICAgIHRoaXMuY3VycmVudFRpdGxlSW5kZXggPSBpbmRleDsKICAgICAgdGhpcy50aXRsZXMgPSBpdGVtOwogICAgICB0aGlzLmdldFRhYmxlRGF0YSgpOwogICAgfSwKICAgIC8vIOaNouS4gOaJuQogICAgYmF0Y2g6IGZ1bmN0aW9uIGJhdGNoKCkgewogICAgICB0aGlzLnBhZ2VObyA9IHRoaXMucGFnZU5vICsgMTsKICAgICAgdGhpcy5nZXRQcm9tb3Rpb25MaXN0KCk7CiAgICB9LAogICAgLy8g6K+i5bqV5Lu3CiAgICBoYW5kbGVFZGl0OiBmdW5jdGlvbiBoYW5kbGVFZGl0KHJvdykgewogICAgICB0aGlzLmZvcm1BbGlnbi5jaXR5ID0gdGhpcy5sb2NhdGlvbjsKICAgICAgdGhpcy5mb3JtQWxpZ24uY2FySWQgPSByb3cuY2FySWQ7CiAgICAgIHRoaXMuZm9ybUFsaWduLmRlYWxlcklkID0gcm93LmRlYWxlcklkOwogICAgICB0aGlzLmZvcm1BbGlnbi5zZXJpZXMgPSByb3cuc2VyaWVzOwogICAgICB0aGlzLmRpYWxvZ0Zvcm1WaXNpYmxlID0gdHJ1ZTsKICAgIH0sCiAgICAvLyDmj5DkuqTor6Lku7fooajljZUKICAgIHVwRGF0ZWRpYWxvZ0Zvcm06IGZ1bmN0aW9uIHVwRGF0ZWRpYWxvZ0Zvcm0oKSB7CiAgICAgIHZhciBfdGhpczEyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMigpIHsKICAgICAgICB2YXIgcmVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTIkKF9jb250ZXh0MTIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMi5wcmV2ID0gX2NvbnRleHQxMi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczEyLiRodHRwLnBvc3QoJy9kZWFsZXIvYWRkWHMnLCBfdGhpczEyLmZvcm1BbGlnbik7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0MTIuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9PSAyMDAgfHwgcmVzLmRhdGEgIT09IHRydWUpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFicnVwdCgicmV0dXJuIiwgX3RoaXMxMi4kbWVzc2FnZS5lcnJvcign5o+Q5Lqk5aSx6LSlJykpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfdGhpczEyLiRtZXNzYWdlLnN1Y2Nlc3MoJ+aPkOS6pOaIkOWKnycpOyAvLyDmuIXnqbrooajljZUKCgogICAgICAgICAgICAgICAgX3RoaXMxMi5mb3JtQWxpZ24ubmFtZSA9ICcnOwogICAgICAgICAgICAgICAgX3RoaXMxMi5mb3JtQWxpZ24ucGhvbmUgPSAnJzsKICAgICAgICAgICAgICAgIF90aGlzMTIuZGlhbG9nRm9ybVZpc2libGUgPSBmYWxzZTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTIpOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAvLyAvLyDojrflj5bnhKbngrnlm74KICAgIHRoaXMuZ2V0U3dpcGVyTGlzdCgpOyAvLyAvLyDojrflj5bnhKbngrnotYTorq8KCiAgICB0aGlzLmdldFRvZGF5SW5mbygpOyAvLyAvLyDojrflj5bng63pl6jovablnosKCiAgICB0aGlzLmdldEhvdENhcigpOyAvLyAvLyDojrflj5bovabluILmiqXku7cKCiAgICB0aGlzLmdldFRhYmxlRGF0YSgpOyAvLyAvLyDojrflj5bllYblrrbkv4PplIAKCiAgICB0aGlzLmdldFByb21vdGlvbkxpc3QoKTsgLy8gLy8g6I635Y+W5o6o6I2Q57uP6ZSA5ZWGCgogICAgdGhpcy5nZXRSZWNvbW1lbmRMaXN0KCk7IC8vIC8vIOiOt+WPlueDremXqOi1hOiurwoKICAgIHRoaXMuZ2V0SG90SW5mb3IoKTsKICAgIHRoaXMuZ2V0RGlzY291bnQoKTsKICAgIHRoaXMuZ2V0QnVzaW5lc3MoKTsgLy8gLy8g6I635Y+W6aG16Z2i5bm/5ZGK5pWw5o2uCgogICAgdGhpcy5nZXRBZHZlcnRpc2VtZW50KCk7CiAgfQp9Ow=="},null]}