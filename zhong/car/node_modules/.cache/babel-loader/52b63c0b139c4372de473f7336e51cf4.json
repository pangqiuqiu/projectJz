{"remainingRequest":"H:\\jz\\w\\zhong\\car\\node_modules\\thread-loader\\dist\\cjs.js!H:\\jz\\w\\zhong\\car\\node_modules\\babel-loader\\lib\\index.js!H:\\jz\\w\\zhong\\car\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!H:\\jz\\w\\zhong\\car\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!H:\\jz\\w\\zhong\\car\\src\\views\\Main.vue?vue&type=script&lang=js&","dependencies":[{"path":"H:\\jz\\w\\zhong\\car\\src\\views\\Main.vue","mtime":1617091224642},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\jz\\w\\zhong\\car\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}