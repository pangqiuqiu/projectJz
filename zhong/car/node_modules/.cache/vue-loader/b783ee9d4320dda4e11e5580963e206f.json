{"remainingRequest":"D:\\myCompany\\zhongdianqiche\\111\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\myCompany\\zhongdianqiche\\111\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\myCompany\\zhongdianqiche\\111\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\myCompany\\zhongdianqiche\\111\\src\\views\\Main.vue?vue&type=template&id=c1f1971a&scoped=true&","dependencies":[{"path":"D:\\myCompany\\zhongdianqiche\\111\\src\\views\\Main.vue","mtime":1595410195628},{"path":"D:\\myCompany\\zhongdianqiche\\111\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\111\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\111\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myCompany\\zhongdianqiche\\111\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}