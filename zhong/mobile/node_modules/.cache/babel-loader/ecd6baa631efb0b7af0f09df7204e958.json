{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _raf = require('raf');\n\nvar _raf2 = _interopRequireDefault(_raf);\n\nvar _tween = require('./tween.js');\n\nvar _tween2 = _interopRequireDefault(_tween);\n\nvar _Loading = require('./Loading');\n\nvar _Loading2 = _interopRequireDefault(_Loading);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint max-len: [0] */\n\n/**\n *\n * @param {number} value\n * @param {number} min\n * @param {number} max\n */\n\n\nfunction setScope(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n\nfunction getDistanceBetweenTouches(e) {\n  if (e.touches.length < 2) return 1;\n  var x1 = e.touches[0].clientX;\n  var y1 = e.touches[0].clientY;\n  var x2 = e.touches[1].clientX;\n  var y2 = e.touches[1].clientY;\n  var distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n  return distance;\n} // const msPerFrame = 1000 / 60;\n\n\nvar maxAnimateTime = 1000;\nvar minTapMoveValue = 5;\nvar maxTapTimeValue = 300;\n/**\n * 图片默认展示模式：宽度等于屏幕宽度，高度等比缩放；水平居中，垂直居中或者居顶（当高度大于屏幕高度时）\n * 图片实际尺寸： actualWith, actualHeight\n * 图片初始尺寸： originWidth, originHeight\n * 坐标位置：left, top\n * 放大倍数：zoom\n * 最大放大倍数：maxZoomNum\n * 坐标关系：-(maxZoomNum - 1) * originWidth / 2 < left < 0\n *         -(maxZoomNum - 1) * originHeight / 2 < top < 0\n * 尺寸关系：width = zoom * originWidth\n *         heigth = zoom * originHeight\n *\n * 放大点位置关系：\n * 初始点位置：oldPointLeft, oldPointTop\n * 放大后位置：newPointLeft, newPointTop\n * 对应关系： newPointLeft = zoom * oldPointLeft\n *          newPointTop = zoom * oldPointTop\n *\n * 坐标位置：-1*left = -1*startLeft + (newPointLeft - oldPointLeft) =-1*startLeft (zoom - 1) * oldPointLeft\n *         -1*top = -1*startTop + (newPointTop - oldPointTop) =-1*startLeft (zoom - 1) * oldPointTop\n * =>\n * left = startLeft + (1 - zoom) * oldPointLeft\n * top = startTop + (1 - zoom) * oldPointTop\n */\n\nvar ImageContainer = function (_PureComponent) {\n  _inherits(ImageContainer, _PureComponent);\n\n  function ImageContainer() {\n    _classCallCheck(this, ImageContainer);\n\n    var _this = _possibleConstructorReturn(this, (ImageContainer.__proto__ || Object.getPrototypeOf(ImageContainer)).call(this));\n\n    _this.state = {\n      width: 0,\n      height: 0,\n      scale: 1,\n      left: 0,\n      top: 0,\n      isLoaded: false\n    };\n\n    _this.onLoad = function () {\n      _this.actualWith = _this.img.width;\n      _this.actualHeight = _this.img.height;\n      var _this$props = _this.props,\n          screenHeight = _this$props.screenHeight,\n          screenWidth = _this$props.screenWidth;\n      var left = 0;\n      var top = 0;\n      _this.originWidth = screenWidth;\n      _this.originHeight = _this.actualHeight / _this.actualWith * screenWidth;\n      _this.originScale = 1;\n\n      if (_this.actualHeight / _this.actualWith < screenHeight / screenWidth) {\n        top = parseInt((screenHeight - _this.originHeight) / 2, 10);\n      }\n\n      _this.originTop = top;\n\n      _this.setState({\n        width: _this.originWidth,\n        height: _this.originHeight,\n        scale: 1,\n        left: left,\n        top: top,\n        isLoaded: true\n      });\n    };\n\n    _this.onError = function () {\n      _this.setState({\n        isLoaded: true\n      });\n    };\n\n    _this.loadImg = function (url) {\n      _this.img = new Image();\n      _this.img.src = url;\n      _this.img.onload = _this.onLoad;\n      _this.img.onerror = _this.onError;\n\n      _this.setState({\n        isLoaded: false\n      });\n    };\n\n    _this.unloadImg = function () {\n      delete _this.img.onerror;\n      delete _this.img.onload;\n      delete _this.img.src;\n      delete _this.img;\n    };\n\n    _this.handleTouchStart = function (event) {\n      console.info('handleTouchStart');\n      event.preventDefault();\n\n      if (_this.animationID) {\n        _raf2.default.cancel(_this.animationID);\n      }\n\n      switch (event.touches.length) {\n        case 1:\n          {\n            var targetEvent = event.touches[0];\n            _this.startX = targetEvent.clientX;\n            _this.startY = targetEvent.clientY;\n            _this.diffX = 0;\n            _this.diffY = 0;\n            _this.startLeft = _this.state.left;\n            _this.startTop = _this.state.top;\n            console.info('handleTouchStart this.startX = %s, this.startY = %s, this.startLeft = %s, this.startTop = %s', _this.startX, _this.startY, _this.startLeft, _this.startTop);\n            _this.onTouchStartTime = new Date().getTime();\n            _this.haveCallMoveFn = false;\n            break;\n          }\n\n        case 2:\n          {\n            // 两个手指\n            // 设置手双指模式\n            _this.isTwoFingerMode = true; // 计算两个手指中间点屏幕上的坐标\n\n            var middlePointClientLeft = Math.abs(Math.round((event.touches[0].clientX + event.touches[1].clientX) / 2));\n            var middlePointClientTop = Math.abs(Math.round((event.touches[0].clientY + event.touches[1].clientY) / 2)); // 保存图片初始位置和尺寸\n\n            _this.startLeft = _this.state.left;\n            _this.startTop = _this.state.top;\n            _this.startScale = _this.state.scale; // 计算手指中间点在图片上的位置（坐标值）\n\n            _this.oldPointLeft = middlePointClientLeft - _this.startLeft;\n            _this.oldPointTop = middlePointClientTop - _this.startTop;\n            _this._touchZoomDistanceStart = getDistanceBetweenTouches(event);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.handleTouchMove = function (event) {\n      event.preventDefault();\n\n      switch (event.touches.length) {\n        case 1:\n          {\n            var targetEvent = event.touches[0];\n            var diffX = targetEvent.clientX - _this.startX;\n            var diffY = targetEvent.clientY - _this.startY;\n            _this.diffX = diffX;\n            _this.diffY = diffY;\n            console.info('handleTouchMove one diffX=%s, diffY=%s', diffX, diffY); // 判断是否为点击\n\n            if (Math.abs(diffX) < minTapMoveValue && Math.abs(diffY) < minTapMoveValue) {\n              return;\n            }\n\n            var _this$state = _this.state,\n                scale = _this$state.scale,\n                left = _this$state.left;\n            var width = scale * _this.originWidth;\n\n            if (Math.abs(diffX) > Math.abs(diffY)) {\n              // 水平移动\n              if (_this.state.scale === _this.originScale && Math.abs(diffX) > minTapMoveValue) {\n                _this.haveCallMoveFn = true;\n\n                _this.callHandleMove(diffX);\n\n                return;\n              }\n\n              console.info('handleMove one left=%s, this.startLeft=%s,this.originWidth=%s, width=%s', left, _this.startLeft, _this.originWidth, width);\n\n              if (diffX < 0 && _this.startLeft <= _this.originWidth - width) {\n                _this.haveCallMoveFn = true;\n\n                _this.callHandleMove(diffX);\n\n                return;\n              }\n\n              if (diffX > 0 && _this.startLeft >= 0) {\n                _this.haveCallMoveFn = true;\n\n                _this.callHandleMove(diffX);\n\n                return;\n              }\n            }\n\n            var screenHeight = _this.props.screenHeight;\n            var height = scale * _this.originHeight;\n            var newTop = (screenHeight - height) / 2;\n            var newLeft = _this.startLeft + diffX;\n\n            if (height > screenHeight || _this.state.scale === _this.originScale) {\n              newTop = _this.startTop + diffY;\n            }\n\n            console.info('handleTouchMove one newLeft=%s, newTop=%s', newLeft, newTop);\n\n            _this.setState({\n              left: newLeft,\n              top: newTop\n            });\n\n            break;\n          }\n\n        case 2:\n          {\n            // 两个手指\n            _this._touchZoomDistanceEnd = getDistanceBetweenTouches(event);\n            var zoom = Math.sqrt(_this._touchZoomDistanceEnd / _this._touchZoomDistanceStart);\n\n            var _scale = zoom * _this.startScale;\n\n            _this.setState(function () {\n              var left = _this.startLeft + (1 - zoom) * _this.oldPointLeft;\n              var top = _this.startTop + (1 - zoom) * _this.oldPointTop;\n              console.info('zoom = %s, left = %s, top = %s, scale', zoom, left, top, _scale);\n              return {\n                left: left,\n                top: top,\n                scale: _scale\n              };\n            });\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.handleTouchEnd = function (event) {\n      console.info('handleTouchEnd', event.touches.length);\n      event.preventDefault();\n\n      if (_this.isTwoFingerMode) {\n        // 双指操作结束\n        var touchLen = event.touches.length;\n        _this.isTwoFingerMode = false;\n\n        if (touchLen === 1) {\n          var targetEvent = event.touches[0];\n          _this.startX = targetEvent.clientX;\n          _this.startY = targetEvent.clientY;\n          _this.diffX = 0;\n          _this.diffY = 0;\n        }\n\n        _this.setState(function (prevState, props) {\n          var scale = setScope(prevState.scale, 1, props.maxZoomNum);\n          var width = scale * _this.originWidth;\n          var height = scale * _this.originHeight;\n          var zoom = scale / _this.startScale;\n          var left = setScope(_this.startLeft + (1 - zoom) * _this.oldPointLeft, _this.originWidth - width, 0);\n          var top = void 0;\n\n          if (height > props.screenHeight) {\n            top = setScope(_this.startTop + (1 - zoom) * _this.oldPointTop, props.screenHeight - height, 0);\n          } else {\n            top = (props.screenHeight - height) / 2;\n          }\n\n          if (touchLen === 1) {\n            _this.startLeft = left;\n            _this.startTop = top;\n            _this.startScale = scale;\n            console.info('this.startX = %s, this.startY = %s, this.startLeft = %s, this.startTop = %s', _this.startX, _this.startY, _this.startLeft, _this.startTop);\n          }\n\n          console.info('zoom = %s, left = %s, top = %s, width=%s, height= %s', zoom, left, top, width, height);\n          return {\n            left: left,\n            top: top,\n            scale: scale\n          };\n        });\n      } else {\n        // 单指结束（ontouchend）\n        var diffTime = new Date().getTime() - _this.onTouchStartTime;\n\n        var diffX = _this.diffX,\n            diffY = _this.diffY;\n        console.info('handleTouchEnd one diffTime = %s, diffX = %s, diffy = %s', diffTime, diffX, diffY); // 判断为点击则关闭图片浏览组件\n\n        if (diffTime < maxTapTimeValue && Math.abs(diffX) < minTapMoveValue && Math.abs(diffY) < minTapMoveValue) {\n          _this.context.onClose();\n\n          return;\n        } // 水平移动\n\n\n        if (_this.haveCallMoveFn) {\n          var isChangeImage = _this.callHandleEnd(diffY < 30);\n\n          if (isChangeImage) {\n            // 如果切换图片则重置当前图片状态\n            setTimeout(function () {\n              _this.setState({\n                scale: _this.originScale,\n                left: 0,\n                top: _this.originTop\n              });\n            }, maxAnimateTime / 3);\n            return;\n          }\n        } // TODO 下拉移动距离超过屏幕高度的 1/3 则关闭\n        // console.info(Math.abs(diffY) > (this.props.screenHeight / 2), this.startTop, this.originTop);\n        // if (Math.abs(diffX) < Math.abs(diffY) && Math.abs(diffY) > (this.props.screenHeight / 3) && this.startTop === this.originTop) {\n        //   this.context.onClose();\n        //   return;\n        // }\n\n\n        var x = void 0;\n        var y = void 0;\n        var scale = _this.state.scale; // const width = scale * this.originWidth;\n\n        var height = scale * _this.originHeight; // 使用相同速度算法\n\n        x = diffX * maxAnimateTime / diffTime + _this.startLeft;\n        y = diffY * maxAnimateTime / diffTime + _this.startTop;\n\n        if (_this.state.scale === _this.originScale) {\n          x = 0;\n\n          if (height > _this.props.screenHeight) {\n            y = setScope(y, _this.props.screenHeight - height, 0);\n          } else {\n            y = _this.originTop;\n          }\n        } // x = setScope(x, this.originWidth - width, 0);\n        // if (height > this.props.screenHeight) {\n        // y = setScope(y, this.props.screenHeight - height, 0);\n        // } else {\n        //   y = this.state.top;\n        // }\n\n\n        _this.animateStartValue = {\n          x: _this.state.left,\n          y: _this.state.top\n        };\n        _this.animateFinalValue = {\n          x: x,\n          y: y\n        };\n        _this.animateStartTime = Date.now();\n\n        _this.startAnimate();\n      }\n    };\n\n    _this.startAnimate = function () {\n      _this.animationID = (0, _raf2.default)(function () {\n        // calculate current time\n        var curTime = Date.now() - _this.animateStartTime;\n\n        var left = void 0;\n        var top = void 0; // animate complete\n\n        if (curTime > maxAnimateTime) {\n          _this.setState(function (prevState, props) {\n            var width = prevState.scale * _this.originWidth;\n            var height = prevState.scale * _this.originHeight;\n            left = setScope(prevState.left, _this.originWidth - width, 0);\n\n            if (height > props.screenHeight) {\n              top = setScope(prevState.top, props.screenHeight - height, 0);\n            } else {\n              top = (props.screenHeight - height) / 2;\n            }\n\n            console.info('end animate left= %s, top = %s', left, top);\n            return {\n              left: left,\n              top: top\n            };\n          });\n        } else {\n          left = _tween2.default.easeOutQuart(curTime, _this.animateStartValue.x, _this.animateFinalValue.x, maxAnimateTime);\n          top = _tween2.default.easeOutQuart(curTime, _this.animateStartValue.y, _this.animateFinalValue.y, maxAnimateTime);\n          console.info('startAnimate left= %s, top = %s, curTime = %s', left, top, curTime);\n\n          _this.setState({\n            left: left,\n            top: top\n          });\n\n          _this.startAnimate();\n        }\n      });\n    };\n\n    _this.callHandleMove = function (diffX) {\n      if (!_this.isCalledHandleStart) {\n        _this.isCalledHandleStart = true;\n\n        if (_this.props.handleStart) {\n          _this.props.handleStart();\n        }\n      }\n\n      _this.props.handleMove(diffX);\n    };\n\n    _this.callHandleEnd = function (isAllowChange) {\n      if (_this.isCalledHandleStart) {\n        _this.isCalledHandleStart = false;\n\n        if (_this.props.handleEnd) {\n          return _this.props.handleEnd(isAllowChange);\n        }\n      }\n    };\n\n    _this.actualHeight = 0; // 图片实际高度\n\n    _this.actualWith = 0; // 图片实际宽度\n\n    _this.originHeight = 0; // 图片默认展示模式下高度\n\n    _this.originWidth = 0; // 图片默认展示模式下宽度\n\n    _this.originScale = 1; // 图片初始缩放比例\n\n    _this.startLeft = 0; // 开始触摸操作时的 left 值\n\n    _this.startTop = 0; // 开始触摸操作时的 top 值\n\n    _this.startScale = 1; // 开始缩放操作时的 scale 值\n\n    _this.onTouchStartTime = 0; // 单指触摸开始时间\n\n    _this.isTwoFingerMode = false; // 是否为双指模式\n\n    _this.oldPointLeft = 0; // 计算手指中间点在图片上的位置（坐标值）\n\n    _this.oldPointTop = 0; // 计算手指中间点在图片上的位置（坐标值）\n\n    _this._touchZoomDistanceStart = 0; // 用于记录双指距离\n\n    _this.haveCallMoveFn = false;\n    _this.diffX = 0; // 记录最后 move 事件 移动距离\n\n    _this.diffY = 0; // 记录最后 move 事件 移动距离\n\n    _this.animationID = 0;\n    _this.animateStartTime = 0;\n    _this.animateStartValue = {\n      x: 0,\n      y: 0\n    };\n    _this.animateFinalValue = {\n      x: 0,\n      y: 0\n    };\n    return _this;\n  }\n\n  _createClass(ImageContainer, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.loadImg(this.props.src);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unloadImg();\n\n      if (this.animationID) {\n        _raf2.default.cancel(this.animationID);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          screenWidth = _props.screenWidth,\n          screenHeight = _props.screenHeight,\n          src = _props.src,\n          divLeft = _props.left;\n      var _state = this.state,\n          isLoaded = _state.isLoaded,\n          left = _state.left,\n          top = _state.top,\n          scale = _state.scale,\n          width = _state.width,\n          height = _state.height;\n      var ImageStyle = {\n        width: width,\n        height: height\n      };\n      var translate = 'translate3d(' + left + 'px, ' + top + 'px, 0) scale(' + scale + ')';\n      ImageStyle.WebkitTransform = translate;\n      ImageStyle.transform = translate;\n      var defaultStyle = {\n        left: divLeft,\n        width: screenWidth,\n        height: screenHeight\n      }; // console.info('ImageContainer render');\n\n      return _react2.default.createElement('div', {\n        className: 'viewer-image-container',\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove,\n        onTouchEnd: this.handleTouchEnd,\n        style: defaultStyle\n      }, isLoaded ? _react2.default.createElement('img', {\n        src: src,\n        style: ImageStyle,\n        alt: ''\n      }) : _react2.default.createElement(_Loading2.default, null));\n    }\n  }]);\n\n  return ImageContainer;\n}(_react.PureComponent);\n\nImageContainer.propTypes = {\n  maxZoomNum: _propTypes2.default.number.isRequired,\n  handleStart: _propTypes2.default.func.isRequired,\n  handleMove: _propTypes2.default.func.isRequired,\n  handleEnd: _propTypes2.default.func.isRequired\n};\nImageContainer.contextTypes = {\n  onClose: _propTypes2.default.func\n};\nexports.default = ImageContainer;","map":null,"metadata":{},"sourceType":"script"}